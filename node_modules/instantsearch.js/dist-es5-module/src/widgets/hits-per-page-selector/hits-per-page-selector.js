'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _utils = require('../../lib/utils.js');

var _any = require('lodash/collection/any');

var _any2 = _interopRequireDefault(_any);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autoHideContainer = require('../../decorators/autoHideContainer.js');

var _autoHideContainer2 = _interopRequireDefault(_autoHideContainer);

var _Selector = require('../../components/Selector.js');

var _Selector2 = _interopRequireDefault(_Selector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bem = (0, _utils.bemHelper)('ais-hits-per-page-selector');

/**
 * Instantiate a dropdown element to choose the number of hits to display per page
 * @function hitsPerPageSelector
 * @param  {string|DOMElement} options.container CSS Selector or DOMElement to insert the widget
 * @param  {Array} options.options Array of objects defining the different values and labels
 * @param  {number} options.options[0].value number of hits to display per page
 * @param  {string} options.options[0].label Label to display in the option
 * @param  {boolean} [options.autoHideContainer=false] Hide the container when no results match
 * @param  {Object} [options.cssClasses] CSS classes to be added
 * @param  {string|string[]} [options.cssClasses.root] CSS classes added to the parent `<select>`
 * @param  {string|string[]} [options.cssClasses.item] CSS classes added to each `<option>`
 * @return {Object}
 */

var usage = 'Usage:\nhitsPerPageSelector({\n  container,\n  options,\n  [ cssClasses.{root,item}={} ],\n  [ autoHideContainer=false ]\n})';
function hitsPerPageSelector() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var container = _ref.container;
  var options = _ref.options;
  var _ref$cssClasses = _ref.cssClasses;
  var userCssClasses = _ref$cssClasses === undefined ? {} : _ref$cssClasses;
  var _ref$autoHideContaine = _ref.autoHideContainer;
  var autoHideContainer = _ref$autoHideContaine === undefined ? false : _ref$autoHideContaine;

  if (!container || !options) {
    throw new Error(usage);
  }

  var containerNode = (0, _utils.getContainerNode)(container);
  var Selector = _Selector2.default;
  if (autoHideContainer === true) {
    Selector = (0, _autoHideContainer2.default)(Selector);
  }

  var cssClasses = {
    root: (0, _classnames2.default)(bem(null), userCssClasses.root),
    item: (0, _classnames2.default)(bem('item'), userCssClasses.item)
  };

  return {
    init: function init(_ref2) {
      var helper = _ref2.helper;
      var state = _ref2.state;

      var isCurrentInOptions = (0, _any2.default)(options, function (option) {
        return +state.hitsPerPage === +option.value;
      });

      if (!isCurrentInOptions) {
        if (state.hitsPerPage === undefined) {
          if (window.console) {
            window.console.log('[Warning][hitsPerPageSelector] hitsPerPage not defined. ' + 'You should probably used a `hits` widget or set the value `hitsPerPage` ' + 'using the searchParameters attribute of the instantsearch constructor.');
          }
        } else if (window.console) {
          window.console.log('[Warning][hitsPerPageSelector] No option in `options` ' + 'with `value: hitsPerPage` (hitsPerPage: ' + state.hitsPerPage + ')');
        }

        options = [{ value: undefined, label: '' }].concat(options);
      }

      this.setHitsPerPage = function (value) {
        return helper.setQueryParameter('hitsPerPage', +value).search();
      };
    },

    render: function render(_ref3) {
      var state = _ref3.state;
      var results = _ref3.results;

      var currentValue = state.hitsPerPage;
      var hasNoResults = results.nbHits === 0;

      _reactDom2.default.render(_jsx(Selector, {
        cssClasses: cssClasses,
        currentValue: currentValue,
        options: options,
        setValue: this.setHitsPerPage,
        shouldAutoHideContainer: hasNoResults
      }), containerNode);
    }
  };
}

exports.default = hitsPerPageSelector;